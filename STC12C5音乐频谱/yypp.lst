C51 COMPILER V9.03   YYPP                                                                  10/03/2015 11:36:16 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE YYPP
OBJECT MODULE PLACED IN yypp.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\yypp.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\yypp.ORC) BROWSE DEBUG OBJECTE
                    -XTEND PRINT(.\yypp.lst) OBJECT(yypp.obj)

line level    source

   1          #include "src\STC12C5A.h"                
   2          
   3          #include <intrins.h>      //51基本运算（包括_nop_空函数）
   4          #include <math.h>
   5          
   6          #include "src\Define.h"
   7          
   8          ///////全局变量///////
   9          uchar data DelayTime=9;         
  10          uchar data gain=6,tt=0;
  11          
  12          uchar idata refreshflag[40];
  13          uchar  data LEDBuf[35];   //15列；从左到右；亮的位为真（1）；
  14          
  15          #include "src\ADC.c"
  16          #include "src\fft.h"
  17          
  18          uchar code ax[]={0,0,0,0,0,0,0,0,                                  //“爱心”图标数组
  19                                           0,0,0,0,0,0,0,0,                       
  20          0x00,0x00,0x00,0x70,0xF8,0xFC,0xFE,0x7F,0x7F,0x7F,0xFE,0xFC,0xF8,0x70,0x00,0x00,
  21                                           0,0,0,0,0,0,0,0,
  22                                       0,0,0,0,0,0,0,0,
  23                                          };
  24          
  25          void Delays(uint t)             //延时函数
  26          {  
  27   1              uint j;
  28   1              while(--t)
  29   1              {
  30   2                      for(j=0;j<5;j++); 
  31   2              }   
  32   1      }
  33          
  34          void IOINIT()           //初始化IO口工作模式
  35          {
  36   1              P0M1 = 0x00;        P0M0 = 0xff;       P0=0; //点阵列（Y）（L:OFF； H，H+:ON,ON+;）
  37   1              P1M1 = B(01000011); P1M0 = B(00110000);P1=B(10111111); //(P17@（高阻，IN）&P16@（高阻，IN） ... P11@(高阻
             -，IN)AD2;P10@(高阻，IN)AD1;      
  38   1              P2M1 = B(00000000); P2M0 = B(11111111);P2=0; //点阵行（X0（Left））（L:OFF； H，H+:ON,ON+;）  
  39   1              P3M1 = B(00000000);     P3M0 = B(11111111);P3=0; //点阵行（X1（Right））（L:OFF； H，H+:ON,ON+;）             
  40   1              P1ASF =B(00000011);                          //将P10,P11的IO设置为模拟输入功能；     
  41   1      }
  42          
  43          void BufToLED_Refresh()         //把LEDBuf的数值数据传到P0,通过LED显示出来
  44          {       
  45   1               uchar data i;          //定义循环变量i         
  46   1               uint temp=0x7fff;      //定义temp      
  47   1      
  48   1               for(i=0;i<32;i+=2)     //循环16次操作
  49   1               {
  50   2                      P0=0x00;                //P0输出低电平
  51   2                      P2=temp/256;    //P2为前8位
  52   2                      P3=temp%256;    //P3为后8位
  53   2                      P0=~LEDBuf[i];  //调用LEDBuf数组取反    
C51 COMPILER V9.03   YYPP                                                                  10/03/2015 11:36:16 PAGE 2   

  54   2                      Delays(DelayTime);      //延时一下
  55   2                      P2=0xff;                //消隐  
  56   2                      P3=0xff;                //消隐
  57   2                      temp>>=1;               //右移一位      
  58   2                      temp|=0x8000;   //目的是为从左到右依次允许点亮LED(列)提供条件   
  59   2               }
  60   1      }
  61          
  62          void LOVE()         //“爱心”图标显示
  63          {       
  64   1               uchar data i;          //定义循环变量i
  65   1               uint temp=0x7fff;      //定义temp
  66   1      
  67   1               for(i=0;i<16;i++)      //循环16次操作
  68   1               {
  69   2                      P0=0x00;                //P0输出低电平
  70   2                      P2=temp/256;    //P2为前8位
  71   2                      P3=temp%256;    //P3为后8位
  72   2                      P0=ax[i+tt];    //调用“爱心”图标数据
  73   2                      Delays(DelayTime);      //延时一下
  74   2                      P2=0xff;                //消隐
  75   2                      P3=0xff;                //消隐
  76   2                      temp>>=1;               //右移一位
  77   2                      temp|=0x8000;   //目的是为从左到右依次允许点亮LED(列)提供条件
  78   2               }
  79   1      }
  80          
  81          void Timer_INT()        //定时器初始化
  82          {
  83   1              TMOD = 0x10; //高4位控制T/C1 
  84   1              EA = 1;      //开总中断
  85   1              TH1 = 0x00;  //16位计数寄存器T1高8位
  86   1              TL1 = 0x00;  //16位计数寄存器T1低8位
  87   1              ET1 = 1;     //T/C1中断开
  88   1          TR1 = 1;     //T/C1启动
  89   1      }
  90          
  91          void ax_xs()            //爱心显示
  92          {
  93   1              uint pp=4000;   //定义pp=4000
  94   1              while(pp--)             //如果PP减1后为真(即pp减1后不为0,直到pp=0才跳出while循环)
  95   1              {
  96   2                      if(pp%250==0)   //如果PP/250,余数为0(即pp能被250整除)
  97   2                      {
  98   3                              tt++;           //tt加1
  99   3                      }
 100   2                      LOVE();                 //“爱心”图标显示
 101   2              } 
 102   1              pp=4000;                        //pp重新赋值0                                  
 103   1              while(pp--)             //如果PP减1后为真(即pp减1后不为0,直到pp=0才跳出while循环)
 104   1              {
 105   2                      LOVE();         //“爱心”图标显示
 106   2              }
 107   1              pp=4000;                //pp重新赋值0
 108   1              while(pp--)             //如果PP减1后为真(即pp减1后不为0,直到pp=0才跳出while循环)
 109   1              {
 110   2                      if(pp%250==0)   //如果PP/250,余数为0(即pp能被250整除)
 111   2                      {
 112   3                              tt++;           //tt加1
 113   3                      } 
 114   2                      LOVE();                 //“爱心”图标显示
 115   2              }
C51 COMPILER V9.03   YYPP                                                                  10/03/2015 11:36:16 PAGE 3   

 116   1      }
 117          
 118          void Main()                     //主函数入口
 119          {  
 120   1              uint data Count=700;            //定义变量Count
 121   1              uchar data i,Cgain,num=0;       //定义变量 i,Cgain,num  
 122   1      
 123   1              IOINIT();                       //初始化IO口工作模式
 124   1              ax_xs();                        //爱心显示
 125   1              InitADC();                      //ADC初始化
 126   1              Timer_INT();            //定时器初始化
 127   1      
 128   1              while(1)                //主循环
 129   1              {
 130   2                      for(i=0;i<65;i++)               //for循环操作65次(读取64次ADC转换结果)
 131   2                      {  
 132   3                              dd[i].real=(GetADCResult(0)+GetADCResult(1))<<gain;      
 133   3                              //读取 ad 结果并放大 2 的 gain（变量）次方，然后给 FFT 算法的缓存区赋值
 134   3                      }
 135   2                      processfft();                   //傅立叶变化及处理
 136   2                      if(dd[2].real<32)               //如果读取到的AD结果<32(即音频幅度太小)
 137   2                      {
 138   3                              if(++Count==300)        //电平值过小，则降低gain，减少噪音的电平显示
 139   3                              {
 140   4                                      Count=0;                //Count清0              
 141   4                                      gain=6;                 //gain=6                
 142   4                              }
 143   3                      }
 144   2                      else                                    //否则在AD结果在正常音频范围
 145   2                      {
 146   3                              Count=1;                        //Count赋值1(为下次的音频幅度太小做准备)
 147   3                              if(++num==0xAF)         //播放时，Auto gain；
 148   3                              {
 149   4                                      num=0;                  //num清0                
 150   4      /*自动增益的作用: 当输入的音频信号的音量变大或变小时，采样的 AD 值幅度也会有相应趋势的变化，
 151   4      于是根据这个值自动调节 AD 值放大的倍数，维持在一定的范围内，从而使显示的效果最好，
 152   4      不会出现满屏或者空屏的现象*/
 153   4                                      //自动增益；Automatic gain;
 154   4                                      Cgain=dd[2].real/32;                                    
 155   4                                      if(7<Cgain<=8)          
 156   4                                      {
 157   5                                              gain=4;                 //4
 158   5                                      }
 159   4                                      else if(4<Cgain<=6) 
 160   4                                      {
 161   5                                              gain=5;                 //5
 162   5                                      }
 163   4                                      else if(2<Cgain<=4) 
 164   4                                      {
 165   5                                              gain=6;                 //6
 166   5                                      }
 167   4                                      else 
 168   4                                      {
 169   5                                              gain=7;                 //7
 170   5                                      } 
 171   4                              }
 172   3                      }                
 173   2              }
 174   1      }
 175          
 176          void LEDRefresh_INT() interrupt 3    //定时器中断服务函数
 177          { 
C51 COMPILER V9.03   YYPP                                                                  10/03/2015 11:36:16 PAGE 4   

 178   1          TH1 = 0x8A;     //定时15ms
 179   1          TL1 = 0xD0;     //定时时间越小显示越清楚,但是频谱变化越缓慢
 180   1                                              //反之......大....抖动大.....频谱变化越快
 181   1              BufToLED_Refresh();     //把LEDBuf的数值数据传到P0,通过LED显示出来 
 182   1                                                      //刷新显示缓存区数据来点亮点阵屏                
 183   1      } 
 184          
 185          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1758    ----
   CONSTANT SIZE    =    304    ----
   XDATA SIZE       =    520      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     46      30
   IDATA SIZE       =     40    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
